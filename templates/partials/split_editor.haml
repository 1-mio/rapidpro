-load i18n


.modal-header.title
  %span{ng-model:"formData.rulesetConfig",data-icon:"show",class:"modal-title ruleset-name"}><
.modal-body

  <ng-form name="split_editor">

    .split-header
      .split-choice.pull-left
        %p
          -blocktrans
            When somebody arrives at this point in your flow
        %select{ng-model:"formData.rulesetConfig", ng-options:"config as config.verbose_name for config in rulesetConfigs",style:"width:320px;height:34px",class:"split-type",select2:""}

      %form{name:"variable"}
        #variable-name
          .message
            -trans "Save result as"
          %input{ng-model:"ruleset.label",name:"label",alphanum:"",ng-required:"true",type:"text",id:"label-name", maxlength:"64"}
          .error.ng-hide{ng-show:"variable.$error.alphanum"}
            -trans "The response name must consist of only letters and numbers."


    .response{ng-if:'formData.rulesetConfig.type == "wait_message"'}><
      #split-on
        -trans "If the message response.."

    .expression{ng-if:'formData.rulesetConfig.type == "expression"'}><
      #split-on
        -trans "If the expression "
        %input{ng-model:"ruleset.operand",type:"text", auto-complete:"true", class:"split-operand", maxlength:"128"}

    .flow-field{ng-if:'formData.rulesetConfig.type == "flow_field"'}><
      #split-on
        -trans "If the flow field "
        %select{name:'flowField', required:"true", ng-model:"formData.flowField", ng-options:"field as field.text for field in flowFields"}

    .contact-field{ng-if:'formData.rulesetConfig.type == "contact_field"'}><
      #split-on
        -trans "If the contact field "
        %select{name:'contactField', required:"true", ng-model:"formData.contactField", ng-options:"field as field.text for field in contactFields"}

    .webhook{ng-if:'formData.rulesetConfig.type == "webhook"'}><
      .split-margin
        %p{class:"description"}
          -blocktrans
            Using a Webhook you can fetch data from an external database
            and use it in this flow.
            Enter the URL to call out to at this point in the flow.

        %select{ng-model:"ruleset.webhook_action",ng-options:"method for method in methods",style:"height:34px;width:95px",class:"method",select2:""}
        %input{ng-model:"ruleset.webhook",name:"url",placeholder:"http://yourwebsite.com/endpoint",auto-complete:"",flow:"[[flowId]]",ng-required:"true",type:"url",class:"url", maxlength:"255"}
        .help-text
          -blocktrans
            We'll include the message text along with data specified in
            the
            %a{href:"/api/v1/webhook/#flow"}<
              Webhook Flow Event API
            .

        .help-text
           -blocktrans
            This step will be identified as [[ruleset.uuid]]

        %p{class:"description response"}
          -blocktrans
            If your server responds with JSON, each property will be added
            to the flow.

        .example
          .code
            &#x7B;
            %br
            &nbsp;&nbsp;product: "Solar charging kit",
            %br
            &nbsp;&nbsp;stock_level: 32
            %br
            &#x7D;

        .help-text
          -blocktrans
            In this example @extra.product and @extra.stock_level would be
            added for all future steps.

    // RULE EDITOR
    %form{name:'ruleForm'}
      %span{ng-if:'hasRules()'}><


        %div{ui-sortable:"sortableOptions",ng-model:"ruleset.rules"}
          .rule{ng-repeat:"rule in ruleset.rules track by rule.uuid",ng-show:'rule.config.type != "true"'}
            <ng-form name="inner">
              .icon.icon-menu
              %select{ng-model:"rule.config",ng-options:'operator as operator.verbose_name for operator in operatorConfigs|filter:operator.name="!Other"', class:"operator-select",ng-change:"updateCategory(rule)"}

              // between is the only one with two operands
              .operation{ng-if:"rule.config.operands == 2"}
                %input{ng-model:"rule.test.min",name:"min",number:"",ng-required:"rule.test.min.length > 0 || rule.test.max.length > 0 || rule.category.base.length > 0",ng-change:"updateCategory(rule)",lower-than:"[[rule.test.max]]",type:"text",class:"operand-small"}
                -trans "and"
                %input{ng-model:"rule.test.max", name:"max",number:"",ng-required:"rule.test.min.length > 0 || rule.test.max.length > 0 || rule.category.base.length > 0",ng-change:"updateCategory(rule)",type:"text",class:"operand-small"}

              // single operand based rules that aren't dates
              .operation{ng-if:'rule.config.operands == 1 && rule.config.validate !="date"'}
                %input{ng-model:"rule.test.base",name:"operand",placeholder:"[[rule.config.placeholder]]",auto-complete:"rule.config.auto_complete",flow:"[[flowId]]",ng-required:"rule.category.base",ng-change:"updateCategory(rule)",type:"text",class:"operand",validate-type:"[[rule.config.type]]",uuid:"[[ruleset.uuid]]"}

              // single operand rules with relative dates
              .operation{ng-if:'rule.config.operands == 1 && rule.config.validate =="date"'}
                -trans "today +"
                %input{ng-model:"rule.test.base",name:"days",number:"",ng-required:"rule.category.base",type:"text",class:"operand-small"}
                -trans "days"
              .operation{ng-if:"rule.config.operands == 0"}
              .categorize
                -trans "categorize as"
                %input{ng-model:"rule.category.base",name:"category",ng-required:"rule.config.operands==0 || (rule.config.operands==1 && rule.test.base) || (rule.config.operands==2 && (rule.test.test.min || rule.test.test.max))",ng-change:"rule.category._autoName = false",type:"text",class:"category"}
              .icon.icon-close{ng-click:"remove(rule)"}
              .error{ng-show:"inner.min.$error.lowerThan"}
                -blocktrans
                  Invalid range, [[inner.min.$viewValue]] is not less than [[rule.test.max]]
              .error.ng-hide{ng-show:'inner.days.$error.number'}
                -trans "Enter a valid number of days."
              .error.ng-hide{ng-show:'inner.operand.$error.required'}
                -trans "Please enter a value for evaluating this rule."
              .error.ng-hide{ng-show:'inner.category.$error.required'}
                -trans "Please enter a category name."
            </ng-form>
.modal-footer
  %button{ng-click:"cancel()",class:"btn btn-secondary"}
    -trans "Cancel"
  %button{ng-disabled:'variable.$invalid || (hasRules() && ruleForm.$invalid)',ng-click:"okRules()",class:"btn btn-primary"}
    -trans "Ok"
